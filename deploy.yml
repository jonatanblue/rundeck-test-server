- hosts: localhost
  become: false
  connection: local
  gather_facts: false
  tasks:
    - name: get current public ip as seen by aws
      uri:
        url: http://checkip.amazonaws.com
        return_content: yes
      register: ip
    - name: create security group
      ec2_group:
        name: "rundeck-test-server-sg"
        description: "test"
        vpc_id: "{{ ec2_vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ ip.content | trim }}/32"
          - proto: tcp
            from_port: 4440
            to_port: 4440
            cidr_ip: "{{ ip.content | trim }}/32"
      register: sg
    - name: ensure regular ec2 instance is launched
      ec2:
        region: "{{ aws_region }}"
        key_name: "{{ ec2_key_name }}"
        instance_type: "t3.micro"
        image: "ami-0181f8d9b6f098ec4"
        wait: "yes"
        group_id: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ ec2_subnet_id }}"
        ebs_optimized: "false"
        instance_tags:
          name: "rundeck"
        exact_count: 1
        count_tag:
          name: "rundeck"
        volumes:
          - device_name: "/dev/sda1"
            volume_type: gp2
            volume_size: "20"
            delete_on_termination: true
      register: ec2_info
      no_log: true

    - name: Add instances to host group
      add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: "{{ ec2_info.tagged_instances }}"
      changed_when: false
      no_log: true

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 timeout=320 state=started
      with_items: "{{ ec2_info.tagged_instances }}"
      no_log: true

- hosts: ec2hosts
  user: ubuntu
  become: true
  gather_facts: false
  vars:
    rundeck_deb: "rundeck_2.11.5-1-GA_all.deb"
    max_heap_size: 1536
    min_heap_size: 256
  pre_tasks:
    - raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: false
    - setup:  # Gather facts after python is installed
    - name: get public hostname
      uri:
        url: "http://169.254.169.254/latest/meta-data/public-hostname/"
        return_content: "yes"
      register: public_hostname
      no_log: true
    - set_fact:
        rundeck_url: "http://{{ public_hostname.content }}:4440"
        rundeck_server_name: "{{ public_hostname.content }}"
      no_log: true
  roles:
    - rundeck
  post_tasks:
    - name: wait for rundeck server to come up
      wait_for:
        port: 4440
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 90
      no_log: true
    - name: connect to this
      debug:
        msg: "{{ rundeck_url }}"
      no_log: true

    - name: upload test playbook
      copy:
        src: tests.yml
        dest: /tmp/

    - name: install ansible
      apt:
        name: ansible
        state: latest

    - name: run test playbook
      command:
        ansible-playbook -i "localhost," /tmp/tests.yml
      ignore_errors: yes
      register: out

    - debug: var=out.stdout_lines

    - debug: var=out.stderr_lines

    - name: get instance id
      uri:
        url: "http://169.254.169.254/latest/meta-data/instance-id/"
        return_content: "yes"
      register: instance_id
      no_log: true

    - name: terminate instance
      ec2:
        instance_ids: "{{ instance_id.content }}"
        aws_region: "{{ aws_region }}"
        state: absent
        wait: yes
      delegate_to: localhost
      become: false
      tags:
        - terminate
      no_log: true

    - name: remove security group
      ec2_group:
        name: rundeck-test-server-sg
        description: "test"
        vpc_id: "{{ ec2_vpc_id }}"
        region: "{{ aws_region }}"
        state: absent
      delegate_to: localhost
      become: false
      tags:
        - terminate

    - name: this fails if the test playbook failed
      fail:
        msg: "test playbook failed. check debug output above for details."
      when: out.rc != 0
      delegate_to: localhost
